#!/usr/bin/env ruby -wKU

def genMas2j(n, agent)
  mas2j = "/* Jason Project       */\n"+
          "/* Generated by Felipe */\n"+
          "MAS prodcellT {\n"+
          "\t environment:\n"+
          "\t\t org.kcl.jason.env.scripted.ScriptedEnvironment(\"scripts/generatedScript#{n}.xml\")"+
          "\t agents:\n"+
          "\t\t #{agent}; \n"+
          "}\n"
  return mas2j;
end

basedir="../.."
bin_dir=basedir+"/bin"
lib_dir=basedir+"/lib"
jason_jar=lib_dir+"/jason.jar"
jasonenv_jar=lib_dir+"/jasonenv.jar"
javagp_jar=lib_dir+"/javagp.jar"
jemplan_jar=lib_dir+"/jemplan.jar"
cp=bin_dir+
   ":"+jason_jar+
   ":"+jasonenv_jar+
   ":"+javagp_jar+
   #":"+jemplan_jar+
   "";

initial_Bels = "empty(procUnit1)"+
               " empty(procUnit2)"+
               " empty(procUnit3)"+
               " empty(procUnit4)"+
               " empty(depositBelt)";
              
final_Bels = "endSimulation";

# Main method of the script
if __FILE__ == $0
  if (ARGV.size == 0)
    n = 1
    reps = 1
  else
    n = ARGV[0].to_i()
    reps = 1
  end
  
  for i in 1..ARGV.size do
    if(ARGV[i] == "-reps")
      if(ARGV.size > i+1)
        reps = ARGV[i+1].to_i()
      else
        puts "-reps requires an integer parameter"
      end
      if (reps == 0)
        puts "Invalid argument '#{ARGV[i+1]}', please supply the number of repetitions"
      end
    # elsif(ARGV[i] == "-gen-scripts")
    #       puts "Generating #{n} scripts"
    #       for j in 1..n do
    #         run "java -cp #{cp} -o testScript#{j}.xml prodcell.ScriptGenerator -steps #{j} -firststep 2 -stepsize 2 -initbeliefs #{initial_Bels} -finalevents #{final_Bels} -wipe 1"
    #         
    #       end
    #     end
  end

  if (n == 0)
    puts "Invalid argument '#{ARGV[0]}', please supply the number of experiments"
    exit 0
  end
  
  puts "Running #{n} experiments with #{reps} repetitions"

  #puts Dir.entries(libdir)

  # for i in 1..n do
  #     puts(genMas2j(n,"prodcell"))
  #   end
  # 
  #   for i in 1..n do
  #     system("java -Djava.library.path=#{lib_dir} -cp #{cp} jason.infra.centralised.RunCentralisedMAS prodcell#{i}.mas2j")
  #   end
end