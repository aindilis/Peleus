#!/usr/bin/env ruby -wKU
require 'strscan'
require 'rbconfig'

def genMas2j(n, agent)
  mas2j = "/* Jason Project       */\n"+
          "/* Generated by Felipe */\n"+
          "MAS prodcellT {\n"+
          "\t environment:\n"+
          "\t\t org.kcl.jason.env.scripted.ScriptedEnvironment(\"scripts/generatedScript#{n}.xml\",\".\",\"actions.strips\")"+
          "\t agents:\n"+
          "\t\t #{agent}; \n"+
          "}\n"
  return mas2j;
end

def averageRuns(infile, outfile, expectedParts)
  file = File.open(infile, "r")
  total=0
  divisor=0
  while(line = file.gets)
    s = StringScanner.new(line)
    s.scan(/\w+/); s.scan(/\s+/)
    parts = s.pre_match()
    divisor+=1
    time = s.post_match().chomp()
    total+=time.to_f()
  end
  average = Float(total)/(divisor)
  file.close
  file = File.open(outfile,"a")
  file.puts(expectedParts.to_s()+" "+average.to_s()+"\n")
  file.close
end

def runExperiments(n, reps, agent, lib_dir, cp)
  for i in 1..n do
    # puts(genMas2j(i,"prodcell"))
    projectFile = File.open("prodcellT.mas2j","w")
    projectFile.puts(genMas2j(i,agent))
    projectFile.close()
    for r in 1..reps do
      # p "java -Djava.library.path=#{lib_dir} -cp #{cp} jason.infra.centralised.RunCentralisedMAS prodcellT.mas2j"
      system("java -server -Xms512m -Xmx512m -Djava.library.path=#{lib_dir} -cp #{cp} jason.infra.centralised.RunCentralisedMAS prodcellT.mas2j")
    end
    averageRuns("stats.txt","stats-"+agent+".txt",i*10)
        File.delete("stats.txt")
        system("touch stats.txt")
  end
end

if Config::CONFIG['host_os'] =~ /mswin|mingw/
   CP_SEP = ";"
else
   CP_SEP = ":"
end

# basedir="."
# bin_dir=basedir+"/lib/peleus.jar"
basedir="../.."
bin_dir=basedir+"/bin"
#
lib_dir=basedir+"/lib"
jason_jar=lib_dir+"/jason.jar"
jasonenv_jar=lib_dir+"/jasonenv.jar"
javagp_jar=lib_dir+"/javagp.jar"
jemplan_jar=lib_dir+"/jemplan.jar"
cp=bin_dir+
   CP_SEP+jason_jar+
   CP_SEP+jasonenv_jar+
   CP_SEP+javagp_jar+
   CP_SEP+jemplan_jar+
   "";

initial_Bels = "empty(procUnit1)"+
               " empty(procUnit2)"+
               " empty(procUnit3)"+
               " empty(procUnit4)"+
               " empty(depositBelt)";
              
final_Bels = "endSimulation";

# Main method of the script
if __FILE__ == $0
  if (ARGV.size == 0)
    n = 1
    reps = 1
  else
    n = ARGV[0].to_i()
    reps = 1
  end
  
  for i in 1..ARGV.size do
    if(ARGV[i] == "-reps")
      if(ARGV.size > i+1)
        reps = ARGV[i+1].to_i()
      else
        puts "-reps requires an integer parameter"
      end
      if (reps == 0)
        puts "Invalid argument '#{ARGV[i+1]}', please supply the number of repetitions"
      end
    # elsif(ARGV[i] == "-gen-scripts")
    #       puts "Generating #{n} scripts"
    #       for j in 1..n do
    #         run "java -cp #{cp} -o testScript#{j}.xml prodcell.ScriptGenerator -steps #{j} -firststep 2 -stepsize 2 -initbeliefs #{initial_Bels} -finalevents #{final_Bels} -wipe 1"
    #         
    #       end
    end
  end

  if (n == 0)
    puts "Invalid argument '#{ARGV[0]}', please supply the number of experiments"
    exit 0
  end
  
  p "Classpath #{cp}"
  
  # puts "Running #{n} experiments with #{reps} repetitions for AgentSpeak(L)"
  # runExperiments(n, reps, "prodcellAS", lib_dir, cp)
  
  puts "Running #{n} experiments with #{reps} repetitions for AgentSpeak(PL)"
  runExperiments(n, reps, "prodcell", lib_dir, cp)
  
  # puts "Running #{n} experiments with #{reps} repetitions for AgentSpeak(PL)"
  # runExperiments(n, reps, "prodcellRe", lib_dir, cp)
  
  # puts Dir.entries(lib_dir)

  
    
  # for i in 1..n do
  #   system("java -Djava.library.path=#{lib_dir} -cp #{cp} jason.infra.centralised.RunCentralisedMAS prodcell#{i}.mas2j")
  # end
end